/// <reference types="webdriverio/webdriverio-core" />
/// <reference types="webdriver" />
/// <reference types="webdriverio" />
/// <reference types="@wdio/mocha-framework" />
/// <reference types="@wdio/jasmine-framework" />
export default class TestingBotService implements WebdriverIO.ServiceInstance {
    private _browser?;
    private _capabilities;
    private _config?;
    private _isServiceEnabled?;
    private _suiteTitle?;
    private _tbSecret?;
    private _tbUser?;
    private _failures;
    private _testCnt;
    beforeSession(config: WebdriverIO.Options, capabilities: WebDriver.DesiredCapabilities): void;
    before(caps: WebDriver.Capabilities, specs: string[], browser: WebdriverIO.BrowserObject | WebdriverIO.MultiRemoteBrowserObject): void;
    beforeSuite(suite: WebdriverIO.Suite): void;
    beforeTest(test: WebdriverIO.Test): void;
    afterSuite(suite: WebdriverIO.Suite): void;
    afterTest(test: WebdriverIO.Test, context: any, results: WebdriverIO.TestResult): void;
    beforeFeature(uri: string, feature: any): void;
    beforeScenario(uri: string, feature: any, scenario: any): void;
    afterScenario(uri: string, feature: any, pickle: any, result: any): void;
    after(result?: number): Promise<unknown> | undefined;
    onReload(oldSessionId: string, newSessionId: string): Promise<unknown> | undefined;
    updateJob(sessionId: string, failures: number, calledOnReload?: boolean, browserName?: string): Promise<unknown>;
    getRestUrl(sessionId: string): string;
    getBody(failures: number, calledOnReload?: boolean, browserName?: string): {
        test: any;
    };
}
//# sourceMappingURL=service.d.ts.map